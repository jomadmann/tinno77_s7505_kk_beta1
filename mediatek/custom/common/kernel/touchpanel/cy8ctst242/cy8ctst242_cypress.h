/*
 * Cypress common 
 */

#ifndef __CY8CTST242_CYPRESS__
#define __CY8CTST242_CYPRESS__

#define CY8C242
#ifdef CY8CTMA300_36LQXI
    #define CY8CTMA300
#endif 
#ifdef CY8CTMA300_48LTXI
    #define CY8CTMA300
#endif
#ifdef CY8CTMA300_49FNXI
    #define CY8CTMA300
#endif
#ifdef CY8CTMA300B_36LQXI
    #define CY8CTMA300
#endif
#ifdef CY8CTMA300D_36LQXI
    #define CY8CTMA300
#endif
#ifdef CY8CTMA300D_48LTXI
    #define CY8CTMA300
#endif
#ifdef CY8CTMA300D_49FNXI
    #define CY8CTMA300
#endif
#ifdef CY8CTMA301D_36LQXI
    #define CY8CTMA301D
#endif
#ifdef CY8CTMA301D_48LTXI
    #define CY8CTMA301D
#endif
#ifdef CY8CTMA301E_36LQXI
    #define CY8CTMA301E
#endif
#ifdef CY8CTMA301E_48LTXI
    #define CY8CTMA301E
#endif
#ifdef CY8CTMA300E_36LQXI
    #define CY8CTMA300E
#endif
#ifdef CY8CTMA300E_48LTXI
    #define CY8CTMA300E
#endif
#ifdef CY8CTMA300E_49FNXI
    #define CY8CTMA300E
#endif
#if defined (CY8C242)
#define NUM_BANKS               1
#define BLOCKS_PER_BANK         256
#define SECURITY_BYTES_PER_BANK 64
#elif defined(CY8C20236)
#define NUM_BANKS                    1
#define BLOCKS_PER_BANK             64
#define SECURITY_BYTES_PER_BANK      64	
#elif defined(CY8CTMA300)
#define NUM_BANKS               1
#define BLOCKS_PER_BANK         256
#define SECURITY_BYTES_PER_BANK 64
#elif defined(CY8CTMA301D)
#define NUM_BANKS               1
#define BLOCKS_PER_BANK         128
#define SECURITY_BYTES_PER_BANK 64
#elif defined(CY8CTMA300E)
#define NUM_BANKS               1
#define BLOCKS_PER_BANK         256
#define SECURITY_BYTES_PER_BANK 64
#define ACTIVE_LOW_XRES
#elif defined(CY8CTMA301E)
#define NUM_BANKS               1
#define BLOCKS_PER_BANK         128
#define SECURITY_BYTES_PER_BANK 64
#define ACTIVE_LOW_XRES
#else
#define NUM_BANKS               1
#define BLOCKS_PER_BANK         256
#define SECURITY_BYTES_PER_BANK 64
#endif

/* flash block is 128 bytes. Note Block-Verify Uses 64-Bytes of RAM */
#define TARGET_DATABUFF_LEN         128

/*
 * TRANSITION_TIMEOUT is a loop counter for a 100msec timeout when waiting for 
 * a high-to-low transition. This is used in the polling loop of
 * fDetectHiLoTransition(). Each pass through the loop takes approximately 15
 * usec. 100 msec is about 6740 loops. 200ms = 13480
 */
#define TRANSITION_TIMEOUT		13480
#define XRES_CLK_DELAY              300
#define WAIT_TIME	                   100
#define PASS                    1
#define FAIL                        0

#define CYPRESS_I2C_SCL		GPIO87
#define CYPRESS_I2C_SDA	        GPIO88
#define CYPRESS_I2C_RST		GPIO86
#define RST_GPIO_MODE		0
#define SCL_GPIO_MODE		0
#define SDA_GPIO_MODE		0

unsigned char target_status00_v = 0x00; // Status = 00 means Success, the SROM function did what it was supposed to 
unsigned char target_status01_v = 0x01; // Status = 01 means that function is not allowed because of block level protection
unsigned char target_status03_v = 0x03; // Status = 03 is fatal error, SROM halted
unsigned char target_status04_v = 0x04; // Status = 04 means that ___ for test with ___ (PROGRAM-AND-VERIFY) 
unsigned char target_status06_v = 0x06; // Status = 06 means that Calibrate1 failed, for test with id_setup_1 (ID-SETUP-1)

#if defined (CY8C242)
//unsigned char target_id_v[] = { 0x06, 0x98, 0x21, 0x58 };	//ID for CY8C242 modify
unsigned char target_id_v[] = { 0x06, 0x98, 0x21, 0x52};	//ID for CY8C242
#elif defined (CY8C20236)		// 2012.02.13  ZCLI
unsigned char target_id_v[] = { 0x00, 0xb3, 0x52, 0x21 };	//ID for CY8C20236
#elif defined (CY8C20246)		// 2012.02.13  ZCLI
unsigned char target_id_v[] = { 0x00, 0xAA, 0x52, 0x21 };	//ID for CY8C20246
#elif defined (CY8C20266)
unsigned char target_id_v[] = { 0x00, 0x96, 0x52, 0x21 };	//ID for CY8C20266
#elif defined (CY8C20366)
unsigned char target_id_v[] = { 0x00, 0x97, 0x52, 0x21 };	//ID for CY8C20366
#elif defined (CY8C20466)
unsigned char target_id_v[] = { 0x00, 0x98, 0x52, 0x21 };	//ID for CY8C20466
#elif defined (CY8C20566)
unsigned char target_id_v[] = { 0x00, 0x99, 0x52, 0x21 };	//ID for CY8C20566
#elif defined (CY8C20666)
unsigned char target_id_v[] = { 0x00, 0x9c, 0x52, 0x21 };	//ID for CY8C20666
#elif defined (CY8C20066)
unsigned char target_id_v[] = { 0x00, 0x9a, 0x52, 0x21 };	//ID for CY8C20066
#elif defined (CY8C200661)
unsigned char target_id_v[] = { 0x00, 0x9b, 0x52, 0x21 };	//ID for CY8C200661
#elif defined (CY8CTMA300_36LQXI)
unsigned char target_id_v[] = {0x05, 0x71}; //ID for CY8CTMA300_36LQXI
#elif defined (CY8CTMA300_48LTXI)
unsigned char target_id_v[] = {0x05, 0x72}; //ID for CY8CTMA300_48LTXI
#elif defined (CY8CTMA300_49FNXI)
unsigned char target_id_v[] = {0x05, 0x73}; //ID for CY8CTMA300_49FNXI
#elif defined (CY8CTMA300B_36LQXI)
unsigned char target_id_v[] = {0x05, 0x74}; //ID for CY8CTMA300B_36LQXI
#elif defined (CY8CTMA301D_36LQXI)
unsigned char target_id_v[] = {0x05, 0x77}; //ID for CY8CTMA301D_36LQXI
#elif defined (CY8CTMA301D_48LTXI)
unsigned char target_id_v[] = {0x05, 0x78}; //ID for CY8CTMA301D_48LTXI
#elif defined (CY8CTMA300D_36LQXI)
unsigned char target_id_v[] = {0x05, 0x79}; //ID for CY8CTMA300D_36LQXI
#elif defined (CY8CTMA300D_48LTXI)
unsigned char target_id_v[] = {0x05, 0x80}; //ID for CY8CTMA300D_48LTXI
#elif defined (CY8CTMA300D_49FNXI)
unsigned char target_id_v[] = {0x05, 0x81}; //ID for CY8CTMA300D_49FNXI
#elif defined (CY8CTMA301E_36LQXI)
unsigned char target_id_v[] = {0x05, 0x85}; //ID for CY8CTMA301E_36LQXI
#elif defined (CY8CTMA301E_48LTXI)
unsigned char target_id_v[] = {0x05, 0x86}; //ID for CY8CTMA301E_48LTXI
#elif defined (CY8CTMA300E_36LQXI)
unsigned char target_id_v[] = {0x05, 0x82}; //ID for CY8CTMA300E_36LQXI
#elif defined (CY8CTMA300E_48LTXI)
unsigned char target_id_v[] = {0x05, 0x83}; //ID for CY8CTMA300E_48LTXI
#elif defined (CY8CTMA300E_49FNXI)
unsigned char target_id_v[] = {0x05, 0x84}; //ID for CY8CTMA300E_49FNXI
#endif

//------------ CY8C20x66 Vectors------------------------------------------
const unsigned int num_bits_checksum = 418;
const unsigned char checksum_v[] =
{
    0xDE, 0xE2, 0x1F, 0x7F, 0x02, 0x7D, 0xC4, 0x09,
    0xF7, 0x00, 0x1F, 0x9F, 0x07, 0x5E, 0x7C, 0x81,
    0xF9, 0xF4, 0x01, 0xF7, 0xF0, 0x07, 0xDC, 0x40,
    0x1F, 0x70, 0x01, 0xFD, 0xEE, 0x01, 0xF7, 0xA0,
    0x1F, 0xDE, 0xA0, 0x1F, 0x7B, 0x00, 0x7D, 0xE0,
    0x0F, 0xF7, 0xC0, 0x07, 0xDF, 0x28, 0x1F, 0x7D,
    0x18, 0x7D, 0xFE, 0x25, 0xC0
};

const unsigned int num_bits_program_block = 440;
const unsigned char program_block[] =
{
    0xDE, 0xE2, 0x1F, 0x7F, 0x02, 0x7D, 0xC4, 0x09,
    0xF7, 0x00, 0x1F, 0x9F, 0x07, 0x5E, 0x7C, 0x81,
    0xF9, 0xF7, 0x01, 0xF7, 0xF0, 0x07, 0xDC, 0x40,
    0x1F, 0x70, 0x01, 0xFD, 0xEE, 0x01, 0xF6, 0xA0,
    0x0F, 0xDE, 0x80, 0x7F, 0x7A, 0x80, 0x7D, 0xEC,
    0x01, 0xF7, 0x80, 0x57, 0xDF, 0x00, 0x1F, 0x7C,
    0xA0, 0x7D, 0xF4, 0x61, 0xF7, 0xF8, 0x97
};

//---------Define for CY8CTST242--------------------
const unsigned int num_bits_setup1_kryp = 594;
const unsigned char setup1_v_kryp[] =
{
	0xCA,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,
	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,
	0x0D,	0xEE,	0x21,	0xF7,	0xF0,	0x27,	0xDC,	0x40,
	0x9F,	0x70,	0x01,	0xFD,	0xEE,	0x01,  	0xE7,	0xC1,    //2012.02.13 ZCLI
	0xD7,	0x9F,	0x20,	0x7E,	0x7D,	0x88,	0x7D,	0xEE,
	0x21,	0xF7,	0xF0,	0x07,	0xDC,	0x40,	0x1F,	0x70,
	0x01,	0xFD,	0xEE,	0x01,	0xF7,	0xA0,	0x1F,	0xDE,
	0xA0,	0x1F,	0x7B,	0x00,	0x7D,	0xE0,	0x13,	0xF7,
	0xC0,	0x07,	0xDF,	0x28,	0x1F,	0x7D,	0x18,	0x7D,
	0xFE,	0x25,	0xC0
};

/* -------------define for TMA3xx ---------------------
/*const unsigned int num_bits_id_setup_1 = 616;
const unsigned char id_setup_1[] =
{
    0xCA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0D, 0xEE, 0x21, 0xF7, 0xF0, 0x27, 0xDC, 0x40,
    0x9F, 0x70, 0x01, 0xFD, 0xEE, 0x01, 0xE7, 0xC1,   
    0xD7, 0x9F, 0x20, 0x7E, 0x3F, 0x9D, 0x78, 0xF6,
    0x21, 0xF7, 0xB8, 0x87, 0xDF, 0xC0, 0x1F, 0x71,
    0x00, 0x7D, 0xC0, 0x07, 0xF7, 0xB8, 0x07, 0xDE,
    0x80, 0x7F, 0x7A, 0x80, 0x7D, 0xEC, 0x01, 0xF7,
    0x80, 0x4F, 0xDF, 0x00, 0x1F, 0x7C, 0xA0, 0x7D,
    0xF4, 0x61, 0xF7, 0xF8, 0x97
};
*/

const unsigned int num_bits_id_setup_2 = 418;
const unsigned char id_setup_2[] =
{
    0xDE, 0xE2, 0x1F, 0x7F, 0x02, 0x7D, 0xC4, 0x09,
    0xF7, 0x00, 0x1F, 0x9F, 0x07, 0x5E, 0x7C, 0x81,
    0xF9, 0xF4, 0x01, 0xF7, 0xF0, 0x07, 0xDC, 0x40, 
    0x1F, 0x70, 0x01, 0xFD, 0xEE, 0x01, 0xF7, 0xA0,
    0x1F, 0xDE, 0xA0, 0x1F, 0x7B, 0x00, 0x7D, 0xE0,
    0x0D, 0xF7, 0xC0, 0x07, 0xDF, 0x28, 0x1F, 0x7D,
    0x18, 0x7D, 0xFE, 0x25, 0xC0			
};

const unsigned int num_bits_tsync_enable = 110;
const unsigned char tsync_enable[] =
{
    0xDE, 0xE2, 0x1F, 0x7F, 0x02, 0x7D, 0xC4, 0x09, 
    0xF7, 0x00, 0x1F, 0xDE, 0xE0, 0x1C 	
};
const unsigned int num_bits_tsync_disable = 110;
const unsigned char tsync_disable[] =
{			
    0xDE, 0xE2, 0x1F, 0x71, 0x00, 0x7D, 0xFC, 0x01, 
    0xF7, 0x00, 0x1F, 0xDE, 0xE0, 0x1C 
};

// ---------------2012.02.13 ------ZCLI----------
const unsigned int num_bits_set_block_num = 11;		
const unsigned char set_block_num[] =
{
   0x9F, 0x40, 0x1C
};

/* -----------if define TMA3xx--------------
const unsigned int num_bits_set_block_num = 33;		
const unsigned char set_block_num[] =
{
    0xDE, 0xE0, 0x1E, 0x7D, 0x00, 0x70 
};
*/

const unsigned int num_bits_set_block_num_end = 3;
const unsigned char set_block_num_end = 0xE0;

const unsigned int num_bits_read_write_setup = 66;
const unsigned char read_write_setup[] =
{
    0xDE, 0xF0, 0x1F, 0x78, 0x00, 0x7D, 0xA0, 0x03, 
    0xC0 
};

const unsigned int num_bits_my_verify_setup = 440;
const unsigned char verify_setup[] =
{
  0xde, 0xe2, 0x1f, 0x7f, 0x02, 0x7d, 0xc4, 0x09,
	0xf7, 0x00, 0x1f, 0x9f, 0x07, 0x5e, 0xfc, 0x81,
	0xf9, 0xf7, 0x01, 0xf7, 0xf0, 0x07, 0xdc, 0x40,
	0x1f, 0x70, 0x01, 0xfd, 0xee, 0x01, 0xf6, 0xa8,
	0x0f, 0xde, 0x80, 0x7f, 0x7a, 0x80, 0x7d, 0xec,
	0x01, 0xf7, 0x80, 0x0f, 0xdf, 0x00, 0x1f, 0x7c,
	0xa0, 0xfd, 0xf4, 0x61, 0xf7, 0xf8, 0x97
};
/*const unsigned char verify_setup[] =
{
    0xDE, 0xE2, 0x1F, 0x7F, 0x02, 0x7D, 0xC4, 0x09,
    0xF7, 0x00, 0x1F, 0x9F, 0x07, 0x5E, 0x7C, 0x81,
    0xF9, 0xF7, 0x01, 0xF7, 0xF0, 0x07, 0xDC, 0x40,
    0x1F, 0x70, 0x01, 0xFD, 0xEE, 0x01, 0xF6, 0xA8,
    0x0F, 0xDE, 0x80, 0x7F, 0x7A, 0x80, 0x7D, 0xEC,
    0x01, 0xF7, 0x80, 0x0F, 0xDF, 0x00, 0x1F, 0x7C,
    0xA0, 0x7D, 0xF4, 0x61, 0xF7, 0xF8, 0x97
};*/

const unsigned int num_bits_erase = 396;	
const unsigned char erase[] =
{
	0xde, 0xe2, 0x1f, 0x7f, 0x02, 0x7d, 0xc4, 0x09,
	0xf7, 0x00, 0x1f, 0x9f, 0x07, 0x5e, 0x7c, 0x85,
	0xfd, 0xfc, 0x01, 0xf7, 0x10, 0x07, 0xdc, 0x00,
	0x7f, 0x7b, 0x80, 0x7d, 0xe0, 0x0b, 0xf7, 0xa0,
	0x1f, 0xd7, 0xa0, 0x1f, 0x7b, 0x04, 0x7d, 0xf0,
	0x01, 0xf7, 0xc9, 0x87, 0xdf, 0x48, 0x1f, 0x7f,
	0x89, 0x70
};	
/*const unsigned char erase[] =
{
    0xDE, 0xE2, 0x1F, 0x7F, 0x02, 0x7D, 0xC4, 0x09, 
    0xF7, 0x00, 0x1F, 0x9F, 0x07, 0x5E, 0x7C, 0x85, 
    0xFD, 0xFC, 0x01, 0xF7, 0x10, 0x07, 0xDC, 0x00, 
    0x7F, 0x7B, 0x80, 0x7D, 0xE0, 0x0B, 0xF7, 0xA0, 
    0x1F, 0xDE, 0xA0, 0x1F, 0x7B, 0x04, 0x7D, 0xF0, 
    0x01, 0xF7, 0xC9, 0x87, 0xDF, 0x48, 0x1F, 0x7F, 
    0x89, 0x70
};*/

const unsigned int num_bits_erase_block = 396;
const unsigned char erase_block[] =
{
    0xDE, 0xE2, 0x1F, 0x7F, 0x02, 0x7D, 0xC4, 0x09,
    0xF7, 0x00, 0x1F, 0x9F, 0x07, 0x5E, 0x7C, 0x85,
    0xFD, 0xFC, 0x01, 0xF7, 0x10, 0x07, 0xDC, 0x00,
    0x7F, 0x7B, 0x80, 0x7D, 0xE0, 0x07, 0xF7, 0xA0,
    0x1F, 0xDE, 0xA0, 0x1F, 0x7B, 0x04, 0x7D, 0xF0,
    0x01, 0xF7, 0xC9, 0x87, 0xDF, 0x48, 0x1F, 0x7F,
    0x89, 0x70
};

const unsigned int num_bits_secure = 440;
const unsigned char secure[] =
{
    0xDE, 0xE2, 0x1F, 0x7F, 0x02, 0x7D, 0xC4, 0x09,
    0xF7, 0x00, 0x1F, 0x9F, 0x07, 0x5E, 0x7C, 0x81,
    0xF9, 0xF7, 0x01, 0xF7, 0xF0, 0x07, 0xDC, 0x40,
    0x1F, 0x70, 0x01, 0xFD, 0xEE, 0x01, 0xF6, 0xA0,
    0x0F, 0xDE, 0x80, 0x7F, 0x7A, 0x80, 0x7D, 0xEC,
    0x01, 0xF7, 0x80, 0x27, 0xDF, 0x00, 0x1F, 0x7C,
    0xA0, 0x7D, 0xF4, 0x61, 0xF7, 0xF8, 0x97
};

const unsigned int num_bits_checksum_setup = 418;
const unsigned char checksum_setup[] =
{	
    0xDE, 0xE2, 0x1F, 0x7F, 0x02, 0x7D, 0xC4, 0x09,
    0xF7, 0x00, 0x1F, 0x9F, 0x07, 0x5E, 0x7C, 0x81,
    0xF9, 0xF4, 0x01, 0xF7, 0xF0, 0x07, 0xDC, 0x40,
    0x1F, 0x70, 0x01, 0xFD, 0xEE, 0x01, 0xF7, 0xA0,
    0x1F, 0xDE, 0xA0, 0x1F, 0x7B, 0x00, 0x7D, 0xE0,
    0x0F, 0xF7, 0xC0, 0x07, 0xDF, 0x28, 0x1F, 0x7D,
    0x18, 0x7D, 0xFE, 0x25, 0xC0		
};

const unsigned int num_bits_program_and_verify = 440;
const unsigned char program_and_verify[] =
{
    0xDE, 0xE2, 0x1F, 0x7F, 0x02, 0x7D, 0xC4, 0x09,
    0xF7, 0x00, 0x1F, 0x9F, 0x07, 0x5E, 0x7C, 0x81,
    0xF9, 0xF7, 0x01, 0xF7, 0xF0, 0x07, 0xDC, 0x40,
    0x1F, 0x70, 0x01, 0xFD, 0xEE, 0x01, 0xF6, 0xA0,
    0x0F, 0xDE, 0x80, 0x7F, 0x7A, 0x80, 0x7D, 0xEC,
    0x01, 0xF7, 0x80, 0x57, 0xDF, 0x00, 0x1F, 0x7C,
    0xA0, 0x7D, 0xF4, 0x61, 0xF7, 0xF8, 0x97
};

const unsigned int num_bits_verify_security = 440;
const unsigned char verify_security[] =
{		
    0xDE, 0xE2, 0x1F, 0x7F, 0x02, 0x7D, 0xC4, 0x09,
    0xF7, 0x00, 0x1F, 0x9F, 0x07, 0x5E, 0x7C, 0x81,
    0xF9, 0xF4, 0x01, 0xE7, 0xDC, 0x07, 0xDF, 0xC0,
    0x1F, 0x71, 0x00, 0x7D, 0xC0, 0x07, 0xF7, 0xB8, 
    0x07, 0xDE, 0x80, 0x7F, 0x7A, 0x80, 0x7D, 0xEC, 
    0x01, 0xF7, 0x80, 0x9F, 0xDF, 0x00, 0x1F, 0x7C, 
    0xA0, 0x7D, 0xF4, 0x61, 0xF7, 0xF8, 0x97 
};

const unsigned char read_id_v[] =
{
    0xBF, 0x00, 0xDF, 0x90, 0x00, 0xFE, 0x60, 0xFF, 
    0x00
};
        
const unsigned char write_byte_start = 0x90;    //this is set to SRAM 0x80
const unsigned char write_byte_end = 0xE0;

const unsigned char set_block_number[] = {0x9F, 0x40, 0xE0};
const unsigned char set_block_number_end = 0xE0;

const unsigned char num_bits_wait_and_poll_end = 40;
const unsigned char wait_and_poll_end[] = 
{  
    0x00, 0x00, 0x00, 0x00, 0x00 
};            
            
const unsigned char read_checksum_v[] = 
{  
    0xBF, 0x20, 0xDF, 0x80, 0x80
};

const unsigned char read_byte_v[] = 
{  
    0xB0, 0x80 
};    

#define debug_printk(args...) \
        do { \
                if (debug) { \
                    printk("\n[tpd_upgrader] %s: ", __func__); \
                    printk(args); \
                } \
        } while (0)

#endif
